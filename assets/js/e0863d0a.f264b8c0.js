"use strict";(self.webpackChunknewsite=self.webpackChunknewsite||[]).push([[95039],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>p,MDXProvider:()=>m,mdx:()=>y,useMDXComponents:()=>d,withMDXComponents:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){return function(t){var n=d(t.components);return a.createElement(e,o({},t,{components:n}))}},d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,u=c["".concat(i,".").concat(m)]||c[m]||h[m]||o;return n?a.createElement(u,l(l({ref:t},p),{},{components:n})):a.createElement(u,l({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},18097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={title:"Secret Agent APEX",tags:["oracle","database","encryption","signature","security","communication","secret","plsql","orclapex"],slug:"id/2013",authors:["fuzziebrain"],categories:["Technology","Programming","Oracle Application Express"],date:new Date("2021-10-11T13:30:00.000Z")},i=void 0,l={permalink:"/content/id/2013",source:"@site/posts/secret-agent-apex/index.md",title:"Secret Agent APEX",description:"Ssshhh! Do not tell anyone!",date:"2021-10-11T13:30:00.000Z",formattedDate:"October 11, 2021",tags:[{label:"oracle",permalink:"/content/tags/oracle"},{label:"database",permalink:"/content/tags/database"},{label:"encryption",permalink:"/content/tags/encryption"},{label:"signature",permalink:"/content/tags/signature"},{label:"security",permalink:"/content/tags/security"},{label:"communication",permalink:"/content/tags/communication"},{label:"secret",permalink:"/content/tags/secret"},{label:"plsql",permalink:"/content/tags/plsql"},{label:"orclapex",permalink:"/content/tags/orclapex"}],readingTime:5.3,hasTruncateMarker:!0,authors:[{name:"Adrian Png",title:"Senior Cloud Solutions Architect @ Insum",url:"https://github.com/fuzziebrain",imageURL:"https://github.com/fuzziebrain.png",key:"fuzziebrain"}],frontMatter:{title:"Secret Agent APEX",tags:["oracle","database","encryption","signature","security","communication","secret","plsql","orclapex"],slug:"id/2013",authors:["fuzziebrain"],categories:["Technology","Programming","Oracle Application Express"],date:"2021-10-11T13:30:00.000Z"},prevItem:{title:"Will You Love Me Tomorrow",permalink:"/content/id/2014"},nextItem:{title:"Intelligent APEX Applications - Fact or Fiction?",permalink:"/content/id/2012"}},s={authorsImageUrls:[void 0]},p=[{value:"#JoelKallman Day",id:"joelkallman-day",level:2},{value:"Secret Story Continued...",id:"secret-story-continued",level:2},{value:"Generate the Keys",id:"generate-the-keys",level:3},{value:"Stripping the Keys",id:"stripping-the-keys",level:3},{value:"Secret Agent APEX",id:"secret-agent-apex",level:3},{value:"Load a Private Key",id:"load-a-private-key",level:3},{value:"Decrypt the Secret Message",id:"decrypt-the-secret-message",level:3},{value:"Verify the Sender",id:"verify-the-sender",level:3},{value:"Summary",id:"summary",level:3}],c={toc:p};function d(e){let{components:t,...o}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,(0,r.mdx)("img",{alt:"Ssshhh! Do not tell anyone!",src:n(74904).Z,width:"1280",height:"800"})),(0,r.mdx)("p",null,"For a long time now, I have been eagerly awaiting for out-of-the-box ",(0,r.mdx)("a",{parentName:"p",href:"https://wikipedia.org/wiki/RSA_(cryptosystem)"},"RSA encryption")," support with pure PL/SQL. Not so much for to sharing secrets, but rather, the ability to sign messages and verify signatures. I might have missed the announcements, but it looks like my wait is over support with asymmetric key operations added in 21c, and (perhaps backported) in 19c as-of release 19.9."),(0,r.mdx)("h2",{id:"joelkallman-day"},"#JoelKallman Day"),(0,r.mdx)("p",null,"Before we continue though, along with many other members of the Oracle community, I'd like to ask that you take a one-minute pause to remember ",(0,r.mdx)("a",{parentName:"p",href:"https://twitter.com/joelkallman"},"Joel Kallman")," on this day. Joel was a wonderful man who was not only passionate about his work, but was even more devoted to uplifting others. He was taken away from us too soon, but the best way to move forward, is to continue his work and mould ourselves with his legacy."),(0,r.mdx)("h2",{id:"secret-story-continued"},"Secret Story Continued..."),(0,r.mdx)("p",null,"Before this release, supporting RSA encryption typically involved installing a Java package and writing some custom PL/SQL code. With Oracle Database 19.9 and 21.x, The updated ",(0,r.mdx)("inlineCode",{parentName:"p"},"DBMS_CRYPTO")," package now includes four new functions:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"PKENCRYPT")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"PKDECRYPT")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"SIGN")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"VERIFY"))),(0,r.mdx)("p",null,"By default, new schemas do not have the appropriate privileges to execute the ",(0,r.mdx)("inlineCode",{parentName:"p"},"DBMS_CRYPTO")," package, so please kindly request it from your DBA. The grant statement that you will need is:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"grant execute on dbms_crypto to jenglish;\n")),(0,r.mdx)("p",null,"To demonstrate how to use these new PL/SQL APIs, I have created a simple ",(0,r.mdx)("a",{parentName:"p",href:"https://apex.oracle.com"},"Oracle Application Express")," (APEX) application that users will:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Load a private key."),(0,r.mdx)("li",{parentName:"ol"},"Decrypt a message that was signed by the receiver's public key."),(0,r.mdx)("li",{parentName:"ol"},"Load the sender's public key and a base64-encoded signature signed using the sender's private key. The sender's public key will be used to verify the signature.")),(0,r.mdx)("h3",{id:"generate-the-keys"},"Generate the Keys"),(0,r.mdx)("p",null,"For secure and non-repudiable communications, participants in the conversation would each generate a private-public key pair, and ",(0,r.mdx)("strong",{parentName:"p"},"only")," exchange their public keys. To create the key pair, the common tool used is ",(0,r.mdx)("a",{parentName:"p",href:"https://www.openssl.org/"},"OpenSSL"),". These days, you can find the application already installed in Linux, Mac, and Windows. For me, Alice loves working with Bash and so here's the command that she can use to generate her private key:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out alice_key.pem 2048\n")),(0,r.mdx)("p",null,"And then followed by a command to get her public key to be shared with her peers:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"openssl rsa -in alice_key.pem -outform PEM -pubout -out alice_key_public.pem\n")),(0,r.mdx)("p",null,"The private key should look somewhat like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAy/wiWejt+fKwrT7NHTTEeKuWrWqC4KwzpjWUSCK0zWh832xL\njnrZuJc6Sl8gmMz6/p8p6T2NrJEBIda1EbjAD/W4G7IUykf5LrlICEJ3miJV33WL\nwpFaFI6wmIas2PpodYhMqA0HngEMTP4oQS4AHnVuxn2naijzeRa0HbG55pAr2K1J\n...\n/bneFDA7jyv3bbOujCkk3DpaBjHXunqz5JmAJ6JqqMhzCQwRQ7c=\n-----END RSA PRIVATE KEY-----\n")),(0,r.mdx)("p",null,"And the public key:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy/wiWejt+fKwrT7NHTTE\neKuWrWqC4KwzpjWUSCK0zWh832xLjnrZuJc6Sl8gmMz6/p8p6T2NrJEBIda1EbjA\nD/W4G7IUykf5LrlICEJ3miJV33WLwpFaFI6wmIas2PpodYhMqA0HngEMTP4oQS4A\nHnVuxn2naijzeRa0HbG55pAr2K1J+R/o5hOp460iEbP0HWM16QBwI2TTPfq0R+fz\nKE2EA72g/gbttWSUdRZE/ZdDzG1ZE06RAfu7bNP7GQqGcyMTJ+bv3zWkYlMeDSQD\n5foCzTHrcDomRL9H/snPSfMpnOzn8xwndZcwBE1ydy852NJatIRbPitglgNMKzfi\n8QIDAQAB\n-----END PUBLIC KEY-----\n")),(0,r.mdx)("p",null,"Do the same for Charlie."),(0,r.mdx)("h3",{id:"stripping-the-keys"},"Stripping the Keys"),(0,r.mdx)("p",null,"In the early days of ",(0,r.mdx)("a",{parentName:"p",href:"https://oracle.com/cloud/"},"Oracle Cloud Infrastructure")," ",(0,r.mdx)("a",{parentName:"p",href:"https://docs.cloud.oracle.com/iaas/api/"},"REST API")," support in APEX, you might recall from this ",(0,r.mdx)("a",{parentName:"p",href:"https://blogs.oracle.com/oraclemagazine/post/better-file-storage-in-oracle-cloud"},"article"),", that we had to remove the enclosing tags and linefeeds. While this is no longer required when working with APEX Web Credentials, it's still necessary when working with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"DBMS_CRYPTO")," API. Since we are going to need this a lot, I decided to follow the ",(0,r.mdx)("a",{parentName:"p",href:"https://wikipedia.org/wiki/Don%27t_repeat_yourself"},"DRY")," principle and coded a function to strip these unwanted characters from any RSA private or public keys entered."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"create or replace function strip_rsa_key(p_rsa_key in varchar2)\nreturn varchar2\nas\nbegin\n  return regexp_replace(\n    p_rsa_key\n    ,'(-+((BEGIN|END) (RSA )?(PUBLIC|PRIVATE) KEY)-+\\s?|\\s)'\n    , '');\nend;\n/\n")),(0,r.mdx)("h3",{id:"secret-agent-apex"},"Secret Agent APEX"),(0,r.mdx)("p",null,"I create a simple APEX application with two pages. Page 1 includes the workflow for steps 2 and 3. To avoid displaying the private key once set, a dedicated page 2 was created to provide that information."),(0,r.mdx)("h3",{id:"load-a-private-key"},"Load a Private Key"),(0,r.mdx)("p",null,"Alice loves Bash, but she happens to own a Windows machine, so she often relies on Windows Subsystem for Linux v2 (WSL2). In Windows, there's also a helpful utility to copy text to the clipboard. The following command copies Alice's private key to her clipboard:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"clip.exe < alice_key.pem\n")),(0,r.mdx)("p",null,"She then pastes the clipboard contents into the textarea on page 2."),(0,r.mdx)("p",null,(0,r.mdx)("img",{alt:"Load private key page",src:n(595).Z,width:"1280",height:"376"})),(0,r.mdx)("p",null,"This should activate the ",(0,r.mdx)("em",{parentName:"p"},"Decrypt")," button back on page 1."),(0,r.mdx)("h3",{id:"decrypt-the-secret-message"},"Decrypt the Secret Message"),(0,r.mdx)("p",null,"The secret message that Charlie is sending to Alice will be encrypted using her public key. At the moment, the API appears to only support RSA Public Key Cryptosystem with PKCS1 and OAEP padding. So, if I am not mistaken, Alice should be able to generate the encrypted message using the following OpenSSL command:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'echo -n "Bob has no keys" | openssl rsautl -pubin -inkey alice_key_public.pem \\\n  -encrypt -oaep | openssl base64\n')),(0,r.mdx)("p",null,"Unfortunately, she couldn't get it to work at the time of writing. If you had any pointers, please feel free to comment below. For now, to continue, Alice generated the encrypted message using the function ",(0,r.mdx)("inlineCode",{parentName:"p"},"DBMS_CRYPTO.PKENCRYPT"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"declare\n  l_input_string varchar2(100) := 'Bob has no keys';\n\n  l_public_key raw(4000);\n  l_encrypted_output raw(4000);\nbegin\n  l_public_key :=\n    utl_i18n.string_to_raw(strip_rsa_key(q'[\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy/wiWejt+fKwrT7NHTTE\neKuWrWqC4KwzpjWUSCK0zWh832xLjnrZuJc6Sl8gmMz6/p8p6T2NrJEBIda1EbjA\nD/W4G7IUykf5LrlICEJ3miJV33WLwpFaFI6wmIas2PpodYhMqA0HngEMTP4oQS4A\nHnVuxn2naijzeRa0HbG55pAr2K1J+R/o5hOp460iEbP0HWM16QBwI2TTPfq0R+fz\nKE2EA72g/gbttWSUdRZE/ZdDzG1ZE06RAfu7bNP7GQqGcyMTJ+bv3zWkYlMeDSQD\n5foCzTHrcDomRL9H/snPSfMpnOzn8xwndZcwBE1ydy852NJatIRbPitglgNMKzfi\n8QIDAQAB\n-----END PUBLIC KEY-----\n]'));\n\n  l_encrypted_output :=\n    dbms_crypto.pkencrypt(\n      src => utl_i18n.string_to_raw(l_input_string)\n      , pub_key => l_public_key\n      , pubkey_alg => dbms_crypto.key_type_rsa\n      , enc_alg => dbms_crypto.pkencrypt_rsa_pkcs1_oaep\n    );\n\n  dbms_output.put_line(utl_i18n.raw_to_char(utl_encode.base64_encode(l_encrypted_output)));\nend;\n/\n")),(0,r.mdx)("p",null,"Here's an example of the base64-encoded, encrypted output:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"Wb3KKyyu+8/MxRKn/kIoqAt4ZMsSvE7AZ/Gr+/3x+xHedtxvj504sy7pffIT1BTl\nAbvVdjpcZ+VsxNpYCeN3Q/47R51YKPu/2P5u8FiY+nOLPu+sN5hQc4a6WdHVvRL/\nwvXOhSx0fV6M4OtAO7KMuNrrRCqBlOCXPkIIHMeReAq1YVyVuRrofuDptznuEiOo\nMKIt6s0j95n9RGCNWC3dI3Rsr+Nm64psjtWPVxCFjMUCSqh4fZcFXXW8xdCsHxYw\n0zw43LrD1REnUbUCXAeNOhVXIV5f5TxRYwW9ibkjPTWeDBtViIy33XTvCleEmf7K\n8kMkShUD3gfQt2HJ3FSmNQ==\n")),(0,r.mdx)("p",null,"Running this through the secret agent's cryptopad with Alice's private key loaded, it appears that she has successfully mission #2!"),(0,r.mdx)("p",null,(0,r.mdx)("img",{alt:"Message decrypted!",src:n(11112).Z,width:"1280",height:"800"})),(0,r.mdx)("h3",{id:"verify-the-sender"},"Verify the Sender"),(0,r.mdx)("p",null,"But how can Alice know that Charlie was truly the person who had sent this message. For that, we will rely on Charlie signing his message (in this case, the unencrypted text), and send the digital digest along with the message payload. Again, you can do this with either OpenSSL, ",(0,r.mdx)("inlineCode",{parentName:"p"},"DBMS_CRYPTO.SIGN"),", or any other programming language that supports public key encryption. Here's an example OpenSSL command that Charlie can use to generate the digital signature:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'echo -n "Bob has no keys" | openssl dgst -sha256 -sign charlie_key.pem | \\\n    openssl base64\n')),(0,r.mdx)("p",null,'Along with his Charlie, Alice can now verify that he was indeed the sender of the message "Bob has no keys".'),(0,r.mdx)("p",null,(0,r.mdx)("img",{alt:"Digital signature verified.",src:n(99280).Z,width:"1280",height:"800"})),(0,r.mdx)("h3",{id:"summary"},"Summary"),(0,r.mdx)("p",null,"I am very excited! There are more practical uses for this API, and you can definitely expect a follow up post. Stay tuned!"),(0,r.mdx)("blockquote",null,(0,r.mdx)("u",null,"Photo Credits"),(0,r.mdx)("p",{parentName:"blockquote"},"This post's banner photo is by ",(0,r.mdx)("a",{href:"https://unsplash.com/@tinaflour?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"},"Kristina Flour")," on ",(0,r.mdx)("a",{href:"https://unsplash.com/s/photos/secret-agent?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText"},"Unsplash"))))}d.isMDXComponent=!0},74904:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/kristina-flour-BcjdbyKWquw-1280x800-e4fdb56acae560ac2c2bbd16df812e15.png"},595:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/load-private-key-293a857885b0b15ed909079563d5cfd4.png"},11112:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/message-decrypted-dc47e39c1bba0cfee7b2368e5a0e0fcf.png"},99280:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verified-signature-af411fbd861635ec2aabd5201ce5db1d.png"}}]);