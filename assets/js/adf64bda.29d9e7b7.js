"use strict";(self.webpackChunknewsite=self.webpackChunknewsite||[]).push([[32436],{3905:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>b,useMDXComponents:()=>p,withMDXComponents:()=>d});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(){return o=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},o.apply(this,arguments)}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),d=function(e){return function(a){var t=p(a.components);return n.createElement(e,o({},a,{components:t}))}},p=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(m.Provider,{value:a},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(t),c=r,u=d["".concat(l,".").concat(c)]||d[c]||h[c]||o;return t?n.createElement(u,i(i({ref:a},m),{},{components:t})):n.createElement(u,i({ref:a},m))}));function b(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var m=2;m<o;m++)l[m]=t[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},93817:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var n=t(87462),r=(t(67294),t(3905));const o={title:"Speaking AI to Your Oracle Database",tags:["generative ai","genai","artificial intelligence","machine learning","sql","autonomous database","llm","large language models","oracle apex","orclapex"],categories:["Technology"],authors:["fuzziebrain"],date:new Date("2023-09-23T23:00:00.000Z")},l=void 0,i={permalink:"/content/speaking-ai-to-your-oracle-database",source:"@site/posts/speaking-ai-to-your-oracle-database/index.md",title:"Speaking AI to Your Oracle Database",description:"A woman speaking to an Oracle.",date:"2023-09-23T23:00:00.000Z",formattedDate:"September 23, 2023",tags:[{label:"generative ai",permalink:"/content/tags/generative-ai"},{label:"genai",permalink:"/content/tags/genai"},{label:"artificial intelligence",permalink:"/content/tags/artificial-intelligence"},{label:"machine learning",permalink:"/content/tags/machine-learning"},{label:"sql",permalink:"/content/tags/sql"},{label:"autonomous database",permalink:"/content/tags/autonomous-database"},{label:"llm",permalink:"/content/tags/llm"},{label:"large language models",permalink:"/content/tags/large-language-models"},{label:"oracle apex",permalink:"/content/tags/oracle-apex"},{label:"orclapex",permalink:"/content/tags/orclapex"}],readingTime:6.385,hasTruncateMarker:!0,authors:[{name:"Adrian Png",title:"Senior Cloud Solutions Architect @ Insum",url:"https://github.com/fuzziebrain",imageURL:"https://github.com/fuzziebrain.png",key:"fuzziebrain"}],frontMatter:{title:"Speaking AI to Your Oracle Database",tags:["generative ai","genai","artificial intelligence","machine learning","sql","autonomous database","llm","large language models","oracle apex","orclapex"],categories:["Technology"],authors:["fuzziebrain"],date:"2023-09-23T23:00:00.000Z"},prevItem:{title:"Closing the Era of the APEX Challenge Coin",permalink:"/content/closing-the-era-of-the-apex-challenge-coin"},nextItem:{title:"Train an AI Model to Recognize Oracle APEX Challenge Coins",permalink:"/content/train-an-ai-model-to-recognize-oracle-apex-challenge-coins"}},s={authorsImageUrls:[void 0]},m=[{value:"Summary",id:"summary",level:2},{value:"Update 2023-09-24",id:"update-2023-09-24",level:2}],d={toc:m};function p(e){let{components:a,...o}=e;return(0,r.mdx)("wrapper",(0,n.Z)({},d,o,{components:a,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,(0,r.mdx)("img",{alt:"A woman speaking to an Oracle.",src:t(64970).Z,width:"1280",height:"720"})),(0,r.mdx)("p",null,"One of the key highlights at ",(0,r.mdx)("a",{parentName:"p",href:"https://www.oracle.com/cloudworld/"},"Oracle Cloudworld 2023")," is general availability of ",(0,r.mdx)("a",{parentName:"p",href:"https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/sql-generation-ai-autonomous.html"},(0,r.mdx)("em",{parentName:"a"},"Select AI"))," feature that allows anyone to query the ",(0,r.mdx)("em",{parentName:"p"},"Oracle Database")," using natural language. This is likely made possible with a template wrapping the database metadata with the prompt, and then calling either the ",(0,r.mdx)("a",{parentName:"p",href:"https://openai.com"},(0,r.mdx)("em",{parentName:"a"},"OpenAI"))," or ",(0,r.mdx)("a",{parentName:"p",href:"https://cohere.com"},(0,r.mdx)("em",{parentName:"a"},"Cohere"))," APIs to generate the intended text."),(0,r.mdx)("p",null,"This feature is already available on an ",(0,r.mdx)("em",{parentName:"p"},"Oracle Autonomous Database")," (ADB), and yes, that includes the ",(0,r.mdx)("em",{parentName:"p"},"Always Free")," instances that I use for the managing the ",(0,r.mdx)("a",{parentName:"p",href:"https://apex.oracle.com"},(0,r.mdx)("em",{parentName:"a"},"Oracle APEX"))," ",(0,r.mdx)("a",{parentName:"p",href:"/content/id/1727"},(0,r.mdx)("em",{parentName:"a"},"Challenge Coin"))," registry. I know everyone's eager to try it out, and so am I! So here's a quick set of instructions to get you going."),(0,r.mdx)("p",null,"The first thing that you'll need to do is make sure your application schema has the appropriate rights to use this feature. As the ADB ",(0,r.mdx)("em",{parentName:"p"},"ADMIN")," user, first add the Access Control Entry (ACE) for using the intended API. Also, grant the user access to both the ",(0,r.mdx)("inlineCode",{parentName:"p"},"DBMS_CLOUD")," and new ",(0,r.mdx)("inlineCode",{parentName:"p"},"DBMS_CLOUD_AI")," packages."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"define schema_name = 'core'\n\nbegin\n  dbms_network_acl_admin.append_host_ace(\n    host => 'api.cohere.ai'\n    , ace => xs$ace_type(\n        privilege_list => xs$name_list('http')\n        , principal_name => upper('&schema_name')\n        , principal_type => xs_acl.ptype_db\n      )\n  );\nend;\n/\n\ngrant execute on dbms_cloud to &schema_name;\ngrant execute on dbms_cloud_ai to &schema_name;\n")),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},(0,r.mdx)("strong",{parentName:"p"},"NOTE:")),(0,r.mdx)("p",{parentName:"blockquote"},"For OpenAI, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"host")," value would be ",(0,r.mdx)("inlineCode",{parentName:"p"},"api.openai.com"),".")),(0,r.mdx)("p",null,"Next, as the user, create a credential for storing the required credentials for accessing the target API. For Cohere, you will first need to sign up for an account. For development use, access to the API is free, and an API key should have already been generated for you. A ",(0,r.mdx)("inlineCode",{parentName:"p"},"username")," is not required, and thus I replaced with the name associated with the API key."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"begin\n  dbms_cloud.create_credential(\n    credential_name => 'COHERE_CRED'\n    , username => 'default'\n    , password => '***'\n  );\nend;\n/\n")),(0,r.mdx)("p",null,"Create a profile using the credential."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"begin\n  dbms_cloud_ai.create_profile(\n    profile_name => 'COHERE'\n    , attributes => json_object(\n        key 'provider' value 'cohere'\n        , key 'credential_name' value 'COHERE_CRED'\n        , key 'object_list' value json_array(\n            json_object(\n              key 'owner' value 'core'\n              , key 'name' value 'coin'\n            )\n          )\n      )\n  );\nend;\n/\n")),(0,r.mdx)("p",null,"The credential and profile name can be anything that makes sense to you. However, when creating the profile, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"provider")," attribute is required and must be either ",(0,r.mdx)("inlineCode",{parentName:"p"},"openai")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"cohere"),". The ",(0,r.mdx)("inlineCode",{parentName:"p"},"object_list")," attribute provides you the opportunity to scope what database objects should be included. You may optionally specify the ",(0,r.mdx)("inlineCode",{parentName:"p"},"owner")," and not a ",(0,r.mdx)("inlineCode",{parentName:"p"},"name")," to included ",(0,r.mdx)("strong",{parentName:"p"},"all")," objects in the owner's schema. There are likely limits to how much data you might want to include in a request, and should also keep in mind that the metadata is submitted to an external system."),(0,r.mdx)("p",null,"Other profile attributes include:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"model")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"temperature")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"max_tokens")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"stop_tokens"))),(0,r.mdx)("p",null,"This allows further adjustments to how the ",(0,r.mdx)("em",{parentName:"p"},"Generative AI")," model behaves."),(0,r.mdx)("p",null,"Finally, simply set the user's profile for performing the ",(0,r.mdx)("em",{parentName:"p"},"Select AI")," tasks:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"begin\n  dbms_cloud_ai.set_profile(\n    profile_name => 'COHERE'\n  );\nend;\n/\n")),(0,r.mdx)("p",null,"With that, I can now ask:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"define question = 'how many coins where created for the APEX community?'\nselect ai runsql dbms_assert.enquote_literal('&question');\n")),(0,r.mdx)("p",null,"I correctly received the result ",(0,r.mdx)("inlineCode",{parentName:"p"},"200"),"! But that's way too easy for this ",(0,r.mdx)("em",{parentName:"p"},"Large Language Model")," (LLM). So, I thought I'll add all the objects in the schema, since it isn't too big."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"begin\n  dbms_cloud_ai.drop_profile('COHERE');\n  dbms_cloud_ai.create_profile(\n    profile_name => 'COHERE'\n    , attributes => json_object(\n        key 'provider' value 'cohere'\n        , key 'credential_name' value 'COHERE_CRED'\n        , key 'object_list' value json_array(\n            json_object(\n              key 'owner' value 'core'\n              --, key 'name' value 'coin'\n            )\n          )\n      )\n  );\nend;\n/\n")),(0,r.mdx)("p",null,'And then I asked, "How many coins have been sponsored?". It said, "0", and that is incorrect! To figure out why, I used the ',(0,r.mdx)("em",{parentName:"p"},"action")," keyword ",(0,r.mdx)("em",{parentName:"p"},"showsql")," as opposed to ",(0,r.mdx)("em",{parentName:"p"},"runsql"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"define question = 'how many coins have been sponsored?'\nselect ai showsql dbms_assert.enquote_literal('&question');\n")),(0,r.mdx)("p",null,"Yielding the SQL statement:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},'SELECT COUNT(*) FROM "CORE"."SHIPMENT"\nWHERE "SHIPMENT_ID" IN (\n  SELECT "SHIPMENT_ID" FROM "CORE"."SPONSOR_EVENT"\n  WHERE "SPONSORSHIP_TYPE" = \'SPONSORED\'\n)\n')),(0,r.mdx)("p",null,"And this could be wrong for reasons as follows:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"There is no ",(0,r.mdx)("inlineCode",{parentName:"li"},"SPONSORSHIP_TYPE")," with the value ",(0,r.mdx)("inlineCode",{parentName:"li"},"SPONSORED"),". I wonder if having a lookup table might have helped, but I do have a ",(0,r.mdx)("inlineCode",{parentName:"li"},"CHECK")," constraint that specifies what values are allowed."),(0,r.mdx)("li",{parentName:"ul"},"It might not have understood the intended meaning of the table name ",(0,r.mdx)("inlineCode",{parentName:"li"},"SPONSOR_EVENT"),", but I don't always name tables such they are semantically accurate. And of course, having lived through the age of 30-character limits on object names, table names might be missing vowels or word separators."),(0,r.mdx)("li",{parentName:"ul"},"My data model for this project might not have been optimum. ",(0,r.mdx)("inlineCode",{parentName:"li"},"SHIPMENT")," was about shipments, but not all sponsor events involved a shipping event. They were delivered personally.")),(0,r.mdx)("p",null,"I would have expected the ",(0,r.mdx)("inlineCode",{parentName:"p"},"narrate")," to explain how it had derived the SQL statement it generated."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"select ai narrate dbms_assert.enquote_literal('&question');\n")),(0,r.mdx)("p",null,"However, what I got was a different SQL statement. And the same with ",(0,r.mdx)("inlineCode",{parentName:"p"},"chat"),"."),(0,r.mdx)("p",null,'Finally, the next question I had was, "Can I use this in APEX?".'),(0,r.mdx)("p",null,(0,r.mdx)("img",{alt:"Using &quot;Select AI&quot; in Oracle APEX",src:t(6973).Z,width:"2560",height:"360"})),(0,r.mdx)("p",null,"Maybe not yet?"),(0,r.mdx)("p",null,'I don\'t believe that, today, there is a simply way to "plugin" this new feature. The outputs of the query can be as dynamic as the inputs. Maybe a blend of using the ',(0,r.mdx)("inlineCode",{parentName:"p"},"APEX_EXEC")," package and ",(0,r.mdx)("inlineCode",{parentName:"p"},"DBMS_CLOUD_AI.GENERATE")," function? I wonder. Also, currently, I don't believe there's an APEX PL/SQL API that would allow us to create a report dynamically. Perhaps that might change some day. ",(0,r.mdx)("strong",{parentName:"p"},"If you have thoughts about this, please reach out"),"."),(0,r.mdx)("h2",{id:"summary"},"Summary"),(0,r.mdx)("p",null,"This technology is still very much in its infancy, but exciting nonetheless. Though I am on the fence if it's ready for prime time. I wouldn't put this in front of an uninformed user yet. To be fair, I have not tried this with the OpenAI LLM models. Maybe it'll do better. Or perhaps, I need the LLMs to suggest improvements to my data models. ;-) And that brings me to the final point - semantics! In the era of big data and machine learning, one concept that often gets brushed away is providing rich semantics to data and metadata. We have had OCI Data Catalog for a while now... how many of us actually use it? Or adding proper comments to the schema metadata, which was clearly lacking in my toy project. If that was included in the prompt, then perhaps I would have had better results."),(0,r.mdx)("h2",{id:"update-2023-09-24"},"Update ","[2023-09-24]"),(0,r.mdx)("p",null,"So, I was still trying to get ",(0,r.mdx)("em",{parentName:"p"},"Select AI")," to give me the correct answer to the question:"),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},"How many coins have been sponsored?")),(0,r.mdx)("p",null,"I did find the answer to my earlier question about whether or not comments were included in the prompt. There is one more profile attribute that can be added to the profile. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"comments")," attribute supplies the LLM with comments in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"sys.all_col_comments")," view. Unfortunately, table comments don't seem to be included. Adding comments describing what the tables and views represented didn't seem to help. I couldn't get it to ignore a view that was never going to tell you if a coin has been sponsored. It was also creating predicates on columns that didn't exist, so the third attribute I had tweaked was to specify what database objects are in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"object_list"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"declare\n  l_objects_list_jsonstr varchar2(32767);\nbegin\n  begin\n    dbms_cloud_ai.drop_profile('COHERE_WITH_COMMENTS');\n  exception\n    when others then null;\n  end;\n\n  select json_arrayagg(\n    json_object(key 'owner' value 'core', key 'name' value table_name))\n  into l_objects_list_jsonstr\n  from user_tables;\n\n  dbms_cloud_ai.create_profile(\n    profile_name => 'COHERE_WITH_COMMENTS'\n    , attributes => json_object(\n        key 'provider' value 'cohere'\n        , key 'credential_name' value 'COHERE_CRED'\n        , key 'comments' value true\n        , key 'temperature' value 0\n        , key 'object_list' value l_objects_list_jsonstr\n      )\n  );\nend;\n/\n")),(0,r.mdx)("p",null,"I still do have the correct answer. :-("))}p.isMDXComponent=!0},6973:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/select-ai-in-apex-fc8cc942719418686f6246ed5d55df53.png"},64970:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/speak-to-the-oracle-7c1a0599df189e350c37b55251e99abe.png"}}]);